{"version":3,"sources":["webpack:///src/app/admin/components/subscription/services/subscription.service.ts","webpack:///src/app/shared/custom-validators.ts"],"names":["SubscriptionService","http","url","API_URL","price","get","getSubscription","getActiveSubscription","data","post","saveBilling","payPalSubscribe","subscriptionId","VerifySubscription","invoice_list","Id","httpOptions","responseType","downloadInvoice","providedIn","CustomValidators","regex","error","control","value","valid","test","newpassword","cpassword","setErrors","NoPassswordMatch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAQaA,mBAAmB;AAI9B,qCAAoBC,IAApB,EAAsC;AAAA;;AAAlB,eAAAA,IAAA,GAAAA,IAAA;AAFZ,eAAAC,GAAA,GAAM,EAAN;AAGN,eAAKA,GAAL,GAAW,yEAAUC,OAArB;AACD;;AAN6B;AAAA;AAAA,0CAQdC,KARc,EAQT;AACjB,mBAAO,KAAKH,IAAL,CAAUI,GAAV,CAAc,yEAAUC,eAAV,GAA0BF,KAAxC,CAAP;AACH;AAV6B;AAAA;AAAA,iDAWV;AAClB,mBAAO,KAAKH,IAAL,CAAUI,GAAV,CAAc,yEAAUE,qBAAxB,CAAP;AACD;AAb6B;AAAA;AAAA,sCAclBC,IAdkB,EAcd;AACd,mBAAO,KAAKP,IAAL,CAAUQ,IAAV,CAAe,yEAAUC,WAAzB,EAAqCF,IAArC,CAAP;AACD;AAhB6B;AAAA;AAAA,0CAiBdA,IAjBc,EAiBV;AAClB,mBAAO,KAAKP,IAAL,CAAUI,GAAV,CAAc,yEAAUM,eAAV,GAA0BH,IAAI,CAACI,cAA7C,CAAP;AACD;AAnB6B;AAAA;AAAA,6CAoBXJ,IApBW,EAoBP;AACrB,mBAAO,KAAKP,IAAL,CAAUQ,IAAV,CAAe,yEAAUI,kBAAzB,EAA4CL,IAA5C,CAAP;AACD;AAtB6B;AAAA;AAAA,wCAuBnB;AACT,mBAAO,KAAKP,IAAL,CAAUI,GAAV,CAAc,yEAAUS,YAAxB,CAAP;AACD;AAzB6B;AAAA;AAAA,0CA0BdC,EA1Bc,EA0BZ;AAChB,gBAAMC,WAAW,GAAG;AAClBC,0BAAY,EAAE;AADI,aAApB;AAGA,mBAAO,KAAKhB,IAAL,CAAUI,GAAV,CAAc,yEAAUa,eAAV,GAA0B,GAA1B,GAA8BH,EAA5C,EAA+CC,WAA/C,CAAP;AACD;AA/B6B;;AAAA;AAAA,S;;;;gBAPvB;;;;AAOIhB,yBAAmB,6DAH/B,iEAAW;AACVmB,kBAAU,EAAE;AADF,OAAX,CAG+B,GAAnBnB,mBAAmB,CAAnB;;;;;;;;;;;;;;;;ACNb;AAAA;;;AAAA;AAAA;AAAA;;UAAaoB,gB;;;;;;;2CACaC,K,EAAeC,K,EAAuB;AAC5D,mBAAO,UAACC,OAAD,EAAsD;AAC3D,kBAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAClB;AACA,uBAAO,IAAP;AACD,eAJ0D,CAM3D;;;AACA,kBAAMC,KAAK,GAAGJ,KAAK,CAACK,IAAN,CAAWH,OAAO,CAACC,KAAnB,CAAd,CAP2D,CAS3D;;AACA,qBAAOC,KAAK,GAAG,IAAH,GAAUH,KAAtB;AACD,aAXD;AAYD;;;iDAE6BC,O,EAA0B;AACtD,gBAAMI,WAAW,GAAWJ,OAAO,CAAClB,GAAR,CAAY,aAAZ,EAA2BmB,KAAvD,CADsD,CACQ;;AAC9D,gBAAMI,SAAS,GAAWL,OAAO,CAAClB,GAAR,CAAY,WAAZ,EAAyBmB,KAAnD,CAFsD,CAEI;AAC1D;;AACA,gBAAIG,WAAW,KAAKC,SAApB,EAA+B;AAC7B;AACAL,qBAAO,CAAClB,GAAR,CAAY,WAAZ,EAAyBwB,SAAzB,CAAmC;AAAEC,gCAAgB,EAAE;AAApB,eAAnC;AACD;AACF","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport 'rxjs/add/operator/map';\nimport { environment as Constants } from \"src/environments/environment\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubscriptionService {\n\n  private url = '';\n\n  constructor(private http: HttpClient) { \n    this.url = Constants.API_URL\n  }\n\n  getSubscription(price){\n      return this.http.get(Constants.getSubscription+price);\n  }\n  getActiveSubsciption(){\n    return this.http.get(Constants.getActiveSubscription);\n  }\n  saveBilling(data){\n    return this.http.post(Constants.saveBilling,data);\n  }\n  payPalSubscribe(data){\n    return this.http.get(Constants.payPalSubscribe+data.subscriptionId);\n  }\n  VerifySubscription(data){\n    return this.http.post(Constants.VerifySubscription,data);\n  }\n  getInvoices(){\n    return this.http.get(Constants.invoice_list);\n  }\n  downloadInvoice(Id){\n    const httpOptions = {\n      responseType: 'blob' as 'json',\n    };\n    return this.http.get(Constants.downloadInvoice+'/'+Id,httpOptions);\n  }\n}\n","import { ValidationErrors, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!control.value) {\r\n        // if control is empty return no error\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error (no error), else return error passed in the second parameter\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n\r\n  static passwordMatchValidator(control: AbstractControl) {\r\n    const newpassword: string = control.get('newpassword').value; // get password from our password form control\r\n    const cpassword: string = control.get('cpassword').value; // get password from our confirmPassword form control\r\n    // compare is the password math\r\n    if (newpassword !== cpassword) {\r\n      // if they don't match, set an error in our confirmPassword form control\r\n      control.get('cpassword').setErrors({ NoPassswordMatch: true });\r\n    }\r\n  }\r\n}\r\n"]}