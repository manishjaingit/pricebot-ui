{"version":3,"sources":["./src/app/admin/components/subscription/services/subscription.service.ts","./src/app/shared/custom-validators.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAA2C;AACO;AACnB;AACyC;IAK3D,mBAAmB,SAAnB,mBAAmB;IAI9B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,QAAG,GAAG,EAAE,CAAC;QAGf,IAAI,CAAC,GAAG,GAAG,wEAAS,CAAC,OAAO;IAC9B,CAAC;IAED,eAAe,CAAC,KAAK;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wEAAS,CAAC,eAAe,GAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IACD,oBAAoB;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wEAAS,CAAC,qBAAqB,CAAC,CAAC;IACxD,CAAC;IACD,WAAW,CAAC,IAAI;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wEAAS,CAAC,WAAW,EAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IACD,eAAe,CAAC,IAAI;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wEAAS,CAAC,eAAe,GAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACtE,CAAC;IACD,kBAAkB,CAAC,IAAI;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wEAAS,CAAC,kBAAkB,EAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IACD,WAAW;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wEAAS,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAC;IACD,eAAe,CAAC,EAAE;QAChB,MAAM,WAAW,GAAG;YAClB,YAAY,EAAE,MAAgB;SAC/B,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wEAAS,CAAC,eAAe,GAAC,GAAG,GAAC,EAAE,EAAC,WAAW,CAAC,CAAC;IACrE,CAAC;CACF;;YAvCQ,+DAAU;;AAON,mBAAmB;IAH/B,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,mBAAmB,CAgC/B;AAhC+B;;;;;;;;;;;;;ACNhC;AAAA;AAAO,MAAM,gBAAgB;IAC3B,MAAM,CAAC,gBAAgB,CAAC,KAAa,EAAE,KAAuB;QAC5D,OAAO,CAAC,OAAwB,EAA0B,EAAE;YAC1D,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBAClB,sCAAsC;gBACtC,OAAO,IAAI,CAAC;aACb;YAED,4DAA4D;YAC5D,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAExC,wFAAwF;YACxF,OAAO,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC9B,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,sBAAsB,CAAC,OAAwB;QACpD,MAAM,WAAW,GAAW,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC,8CAA8C;QAC5G,MAAM,SAAS,GAAW,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,qDAAqD;QAC/G,+BAA+B;QAC/B,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,wEAAwE;YACxE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC;SAChE;IACH,CAAC;CACF","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport 'rxjs/add/operator/map';\nimport { environment as Constants } from \"src/environments/environment\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubscriptionService {\n\n  private url = '';\n\n  constructor(private http: HttpClient) { \n    this.url = Constants.API_URL\n  }\n\n  getSubscription(price){\n      return this.http.get(Constants.getSubscription+price);\n  }\n  getActiveSubsciption(){\n    return this.http.get(Constants.getActiveSubscription);\n  }\n  saveBilling(data){\n    return this.http.post(Constants.saveBilling,data);\n  }\n  payPalSubscribe(data){\n    return this.http.get(Constants.payPalSubscribe+data.subscriptionId);\n  }\n  VerifySubscription(data){\n    return this.http.post(Constants.VerifySubscription,data);\n  }\n  getInvoices(){\n    return this.http.get(Constants.invoice_list);\n  }\n  downloadInvoice(Id){\n    const httpOptions = {\n      responseType: 'blob' as 'json',\n    };\n    return this.http.get(Constants.downloadInvoice+'/'+Id,httpOptions);\n  }\n}\n","import { ValidationErrors, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!control.value) {\r\n        // if control is empty return no error\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error (no error), else return error passed in the second parameter\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n\r\n  static passwordMatchValidator(control: AbstractControl) {\r\n    const newpassword: string = control.get('newpassword').value; // get password from our password form control\r\n    const cpassword: string = control.get('cpassword').value; // get password from our confirmPassword form control\r\n    // compare is the password math\r\n    if (newpassword !== cpassword) {\r\n      // if they don't match, set an error in our confirmPassword form control\r\n      control.get('cpassword').setErrors({ NoPassswordMatch: true });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}